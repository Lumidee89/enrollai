const mongoose = require("mongoose");

const applicationSchema = new mongoose.Schema(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    applicationType: {
      type: String,
      required: true,
    },
    applicationTitle: {
      type: String,
      required: true,
    },
    organizationName: {
      type: String,
      required: true,
    },
    organizationId: {
      type: String,
      required: true,
    },
    step1: {
      personalInformation: {
        lastName: { type: String, required: true },
        firstName: { type: String, required: true },
        middleName: { type: String, default: "" },
        otherNames: { type: String, default: "" },
        homeMailingAddress: { type: String, required: true },
        city: { type: String, required: true },
        state: { type: String, required: true },
        zip: { type: String, required: true },
        homeTelephone: { type: String, required: true },
        email: { type: String, required: true },
        homeFax: { type: String },
        cellPhone: { type: String },
        birthdate: { type: Date, required: true },
        birthplace: { type: String },
        SSN: { type: String },
        gender: {
          type: String,
          enum: ["Male", "Female", "Other"],
          required: true,
        },
        citizenship: { type: String },
        specialty: { type: String },
        raceEthnicity: { type: String },
        subspecialties: { type: String },
        NPI: { type: String },
        cahqID: { type: String },
        cahqPassword: { type: String },
      },

      practiceInformation: {
        primaryOfficeName: { type: String },
        primaryDepartmentName: { type: String },
        primaryOfficeAddress: { type: String },
        primaryCity: { type: String },
        primaryState: { type: String },
        primaryZIP: { type: String },
        primaryTelephone: { type: String },
        primaryFax: { type: String },
        primaryOfficeManager: { type: String },
        primaryOfficeManagerPhone: { type: String },
        primaryOfficeManagerFax: { type: String },
        primaryTaxIDName: { type: String },
        primaryFederalTaxID: { type: String },

        secondaryOfficeAddress: { type: String },
        secondaryCity: { type: String },
        secondaryState: { type: String },
        secondaryZIP: { type: String },
        secondaryOfficeManager: { type: String },
        secondaryFax: { type: String },
        secondaryTelephone: { type: String },
        secondaryTaxIDName: { type: String },
        secondaryFederalTaxID: { type: String },

        tertiaryOfficeAddress: { type: String },
        tertiaryCity: { type: String },
        tertiaryState: { type: String },
        tertiaryZIP: { type: String },
        tertiaryOfficeManager: { type: String },
        tertiaryFax: { type: String },
        tertiaryTelephone: { type: String },
        tertiaryTaxIDName: { type: String },
        tertiaryFederalTaxID: { type: String },
      },

      education: {
        premedicalInstitution: { type: String },
        premedicalDegree: { type: String },
        premedicalGraduationDate: { type: Date },
        premedicalMailingAddress: { type: String },
        premedicalCity: { type: String },
        premedicalState: { type: String },
        premedicalZIP: { type: String },

        medicalSchoolInstitution: { type: String },
        medicalSchoolDegree: { type: String },
        medicalSchoolGraduationDate: { type: Date },
        medicalSchoolMailingAddress: { type: String },
        medicalSchoolCity: { type: String },
        medicalSchoolState: { type: String },
        medicalSchoolZIP: { type: String },

        professionalSchoolInstitution: { type: String },
        professionalSchoolDegree: { type: String },
        professionalSchoolGraduationDate: { type: Date },
        professionalSchoolMailingAddress: { type: String },
        professionalSchoolCity: { type: String },
        professionalSchoolState: { type: String },
        professionalSchoolZIP: { type: String },

        internshipInstitution: { type: String },
        internshipProgramDirector: { type: String },
        internshipMailingAddress: { type: String },
        internshipCity: { type: String },
        internshipState: { type: String },
        internshipZIP: { type: String },
        internshipType: { type: String },
        internshipSpecialty: { type: String },
        internshipFromDate: { type: Date },
        internshipToDate: { type: Date },
        internshipPhysicianName: { type: String },
      },
    },
    step2: {
      residencies: [
        {
          residency1Institution: { type: String },
          residency1ProgramDirector: { type: String },
          residency1MailingAddress: { type: String },
          residency1City: { type: String },
          residency1State: { type: String },
          residency1ZIP: { type: String },
          residency1Type: { type: String },
          residency1Specialty: { type: String },
          residency1FromDate: { type: Date },
          residency1ToDate: { type: Date },
          residency1Completed: { type: Boolean },
        },
        {
          residency2Institution: { type: String },
          residency2ProgramDirector: { type: String },
          residency2MailingAddress: { type: String },
          residency2City: { type: String },
          residency2State: { type: String },
          residency2ZIP: { type: String },
          residency2Type: { type: String },
          residency2Specialty: { type: String },
          residency2FromDate: { type: Date },
          residency2ToDate: { type: Date },
          residency2Completed: { type: Boolean },
        },
        {
          residency3Institution: { type: String },
          residency3ProgramDirector: { type: String },
          residency3MailingAddress: { type: String },
          residency3City: { type: String },
          residency3State: { type: String },
          residency3ZIP: { type: String },
          residency3Type: { type: String },
          residency3Specialty: { type: String },
          residency3FromDate: { type: Date },
          residency3ToDate: { type: Date },
          residency3Completed: { type: Boolean },
        },
      ],

      medicalLicenses: {
        deaRegistrationNumber: { type: String },
        deaExpirationDate: { type: Date },
        deaExpirationFile: { type: String },

        controlledSubstanceCertificate: { type: String },
        controlledSubstanceExpirationDate: { type: Date },
        controlledSubstanceExpirationFile: { type: String },

        ECFMGNumber: { type: String },
        ecfmIssueDate: { type: Date },
        ecfmValidThrough: { type: Date },
        ECFMGFile: { type: String },

        medicaidIDNumber: { type: String },
        medicaidCertificate: { type: Date },
      },

      otherMedLicenses: {
        stateMedicalLicense1: { type: String },
        stateMedicalLicenseNumber1: { type: String },
        stateMedicalLicenseExpirationDate1: { type: Date },
        stateMedicalLicensefile1: { type: String },

        stateMedicalLicense2: { type: String },
        stateMedicalLicenseNumber2: { type: String },
        stateMedicalLicenseExpirationDate2: { type: Date },
        stateMedicalLicensefile2: { type: String },

        stateMedicalLicense3: { type: String },
        stateMedicalLicenseNumber3: { type: String },
        stateMedicalLicenseExpirationDate3: { type: Date },
        stateMedicalLicensefile3: { type: String },
      },
    },
    step3: {
      carriers: {
        currentCarrierName: { type: String },
        currentPolicyNumber: { type: String },
        currentEffectiveDate: { type: Date },
        currentExpirationDate: { type: Date },
        currentMailingAddress: { type: String },
        currentCity: { type: String },
        currentState: { type: String },
        currentZIP: { type: String },
        currentPerClaimAmount: { type: Number },
        currentAggregateAmount: { type: Number },

        previousCarrier1Name: { type: String },
        previousCarrier1PolicyNumber: { type: String },
        previousCarrier1FromDate: { type: Date },
        previousCarrier1ToDate: { type: Date },
        previousCarrier1MailingAddress: { type: String },
        previousCarrier1City: { type: String },
        previousCarrier1State: { type: String },
        previousCarrier1ZIP: { type: String },
        currentPerClaim1Amount: { type: Number },
        currentAggregate1Amount: { type: Number },

        previousCarrier2Name: { type: String },
        previousCarrier2PolicyNumber: { type: String },
        previousCarrier2FromDate: { type: Date },
        previousCarrier2ToDate: { type: Date },
        previousCarrier2MailingAddress: { type: String },
        previousCarrier2City: { type: String },
        previousCarrier2State: { type: String },
        previousCarrier2ZIP: { type: String },
        currentPerClaim2Amount: { type: Number },
        currentAggregate2Amount: { type: Number },
      },

      boards: {
        boardCertification1Board: { type: String },
        boardCertification1Specialty: { type: String },
        boardCertification1CertifiedDate: { type: Date },
        boardCertification1ExpirationDate: { type: Date },
        certificationfile1: { type: String },

        boardCertification2Board: { type: String },
        boardCertification2Specialty: { type: String },
        boardCertification2CertifiedDate: { type: Date },
        boardCertification2ExpirationDate: { type: Date },
        certificationfile2: { type: String },

        boardCertification3Board: { type: String },
        boardCertification3Specialty: { type: String },
        boardCertification3CertifiedDate: { type: Date },
        boardCertification3ExpirationDate: { type: Date },
        certificationfile3: { type: String },

        appliedForOtherBoardCertification: { type: Boolean, default: false },

        additionalBoardCertificationIntent: { type: String },
      },
    },
    organizationApplication: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Credapplication",
      required: true,
    },
    status: {
      type: String,
      enum: ["pending", "approved", "declined"],
      default: "pending",
    },
  },
  { timestamps: true }
);

module.exports = mongoose.model("Application", applicationSchema);
